stages:
  - build
  - trigger
  - deploy
  - controls
  - sonarqube

sonarqube_run:
  stage: sonarqube
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  script:
    - sonar-scanner
      -Dsonar.projectKey=fetch-inventory-service
      -Dsonar.sources=.
      -Dsonar.host.url=http://c2vldimsci01.loctest.gov:80
      -Dsonar.login=$DEV_SONARQUBE_TOKEN
  when: manual

build_image:
  stage: build
  image:
    name: git.loc.gov:4567/fetch/build/kaniko-project/executor:1.0.0
    entrypoint: [""]
  variables:
    IMAGE_FULL_TAG: $CI_REGISTRY_IMAGE:latest
  script:
    - echo IMAGE_FULL_TAG $IMAGE_FULL_TAG
    - cp -v images/api.dev.Containerfile Dockerfile
    - echo $DEVELOP_APP_NAME > .env
    - echo $DEVELOP_APP_ENVIRONMENT >> .env
    - echo $DEVELOP_IDP_ENTITY_ID >> .env
    - echo $DEVELOP_IDP_LOGIN_URL >> .env
    - echo $DEVELOP_VUE_HOST >> .env
    - echo $DEVELOP_TIMEZONE >> .env
    - echo $DEVELOP_DATABASE_URL >> .env
    - echo $DEVELOP_MIGRATION_URL >> .env
    - echo $DEVELOP_ENABLE_ORM_SQL_LOGGING >> .env
    - echo $DEVELOP_ALLOWED_ORIGINS_REGEX >> .env
    - echo $DEVELOP_ALLOWED_ORIGINS >> .env
    - echo "COMMIT=$CI_COMMIT_SHORT_SHA" >> .env
    - echo "BRANCH=$CI_COMMIT_BRANCH" >> .env
    - cat .env
    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/Dockerfile
      --destination $IMAGE_FULL_TAG
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'

build_mr:
  stage: build
  image:
    name: git.loc.gov:4567/fetch/build/kaniko-project/executor:1.0.0
    entrypoint: [""]
  variables:
    IMAGE_FULL_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  script:
    - echo IMAGE_FULL_TAG $IMAGE_FULL_TAG
    - echo CI_COMMIT_BRANCH $CI_COMMIT_BRANCH
    - cp -v images/api.dev.Containerfile Dockerfile
    - echo $DEVELOP_APP_NAME > .env
    - echo $DEVELOP_APP_ENVIRONMENT >> .env
    - echo $DEVELOP_TIMEZONE >> .env
    - echo $DEVELOP_IDP_ENTITY_ID >> .env
    - echo $DEVELOP_IDP_LOGIN_URL >> .env
    - echo $DEVELOP_VUE_HOST >> .env
    - echo $DEVELOP_DATABASE_URL >> .env
    - echo $DEVELOP_MIGRATION_URL >> .env
    - echo $DEVELOP_ENABLE_ORM_SQL_LOGGING >> .env
    - echo $DEVELOP_ALLOWED_ORIGINS_REGEX >> .env
    - echo $DEVELOP_ALLOWED_ORIGINS >> .env
    - echo "COMMIT=$CI_COMMIT_SHORT_SHA" >> .env
    - echo "BRANCH=$CI_COMMIT_BRANCH" >> .env
    - cat .env
    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/Dockerfile
      --destination $IMAGE_FULL_TAG
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual

build_image_test:
  stage: build
  image:
    name: git.loc.gov:4567/fetch/build/kaniko-project/executor:1.0.0
    entrypoint: [""]
  variables:
    IMAGE_FULL_TAG: $CI_REGISTRY_IMAGE/test:latest
  script:
    - echo IMAGE_FULL_TAG $IMAGE_FULL_TAG
    - cp -v images/api.test.Containerfile Dockerfile
    - echo $TEST_APP_NAME > .env
    - echo $TEST_APP_ENVIRONMENT >> .env
    - echo $TEST_TIMEZONE >> .env
    - echo $TEST_IDP_ENTITY_ID >> .env
    - echo $TEST_IDP_LOGIN_URL >> .env
    - echo $TEST_VUE_HOST >> .env
    - echo $TEST_DATABASE_URL >> .env
    - echo $TEST_MIGRATION_URL >> .env
    - echo $TEST_ENABLE_ORM_SQL_LOGGING >> .env
    - echo $TEST_ALLOWED_ORIGINS_REGEX >> .env
    - echo $TEST_ALLOWED_ORIGINS >> .env
    - echo "COMMIT=$CI_COMMIT_SHORT_SHA" >> .env
    - echo "BRANCH=$CI_COMMIT_BRANCH" >> .env
    - cat .env
    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/Dockerfile
      --destination $IMAGE_FULL_TAG
  rules:
    - if: $CI_COMMIT_BRANCH == 'test' || $CI_COMMIT_BRANCH == 'develop'

build_image_staging:
  stage: build
  image:
    name: git.loc.gov:4567/fetch/build/kaniko-project/executor:1.0.0
    entrypoint: [""]
  variables:
    IMAGE_FULL_TAG: $CI_REGISTRY_IMAGE/stage:latest
  script:
    - echo IMAGE_FULL_TAG $IMAGE_FULL_TAG
    - cp -v images/api.stage.Containerfile Dockerfile
    - echo $STAGING_APP_NAME > .env
    - echo $STAGING_APP_ENVIRONMENT >> .env
    - echo $STAGING_TIMEZONE >> .env
    - echo $STAGING_IDP_ENTITY_ID >> .env
    - echo $STAGING_IDP_LOGIN_URL >> .env
    - echo $STAGING_VUE_HOST >> .env
    - echo $STAGING_DATABASE_URL >> .env
    - echo $STAGING_MIGRATION_URL >> .env
    - echo $STAGING_ENABLE_ORM_SQL_LOGGING >> .env
    - echo $STAGING_ALLOWED_ORIGINS_REGEX >> .env
    - echo $STAGING_ALLOWED_ORIGINS >> .env
    - echo "COMMIT=$CI_COMMIT_SHORT_SHA" >> .env
    - echo "BRANCH=$CI_COMMIT_BRANCH" >> .env
    - cat .env
    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/Dockerfile
      --destination $IMAGE_FULL_TAG
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging"'
      when: manual

deploy_dev:
  stage: deploy
  image:
    name: git.loc.gov:4567/fetch/build/terraform:alt    # tf image w envsubst added
    entrypoint: [""]
  environment:
    name: develop
    url: https://inventory.dev.fetch.loctest.gov/status/
  script:
    - export TF_VAR_vault_deployer_password=$VAULT_DEPLOYER_PASSWORD_DEV
    - export TF_VAR_vault_addr=$VAULT_ADDR_DEV
    - export TF_VAR_app_name="inventory-service"
    - export TF_VAR_image='git.loc.gov:4567/fetch/inventory_service:latest'
    - export TF_VAR_timestamp=$CI_COMMIT_TIMESTAMP
    - terraform --version
    - cd terraform
    - kubectl config use-context fetch/build:fetch -v=6
    - cp -v $KUBECONFIG kubeconfig
    - export TF_STATE_NAME=develop
    - envsubst < backend.hcl.tmpl > backend.hcl
    - terraform init -backend-config=backend.hcl
    - terraform apply -auto-approve
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'

deploy_test:
  stage: deploy
  image:
    name: git.loc.gov:4567/fetch/build/terraform:alt    # tf image w envsubst added
    entrypoint: [""]
  environment:
    name: test
    url: https://inventory.test.fetch.loctest.gov/status/
  script:
    - export TF_VAR_vault_deployer_password=$VAULT_DEPLOYER_PASSWORD_TEST
    - export TF_VAR_vault_addr=$VAULT_ADDR_TEST
    - export TF_VAR_app_name="inventory-service"
    - export TF_VAR_image='git.loc.gov:4567/fetch/inventory_service/test:latest'
    - export TF_VAR_timestamp=$CI_COMMIT_TIMESTAMP
    - terraform --version
    - cd terraform
    - kubectl config use-context fetch/build:fetch-test -v=6
    - cp -v $KUBECONFIG kubeconfig
    - export TF_STATE_NAME=test
    - envsubst < backend.hcl.tmpl > backend.hcl
    - terraform init -backend-config=backend.hcl
    - terraform apply -auto-approve
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'

deploy_stage:
  stage: deploy
  tags:
    - stage
  image:
    name: git.loc.gov:4567/fetch/build/terraform:alt
    entrypoint: [""]
  environment:
    name: staging
    url: https://inventory.stage.fetch.loc.gov/status/
  script:
    - export TF_VAR_vault_deployer_password=$VAULT_DEPLOYER_PASSWORD_STAGE
    - export TF_VAR_vault_addr=$VAULT_ADDR_STAGE
    - export TF_VAR_app_name="inventory-service"
    - export TF_VAR_image='git.loc.gov:4567/fetch/inventory_service/stage:latest'
    - export TF_VAR_timestamp=$CI_COMMIT_TIMESTAMP
    - terraform --version
    - cd terraform
    - cp -v $FETCH_DEPLOYER_K8S_CONFIG_STAGE kubeconfig
    - export TF_STATE_NAME=stage
    - envsubst < backend.hcl.tmpl > backend.hcl
    - TF_LOG=1 terraform init -backend-config=backend.hcl
    - terraform apply -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging"'
      when: manual
