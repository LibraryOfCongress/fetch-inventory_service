"""bcode_uuid_default

Revision ID: 2025_04_13_15:19:26
Revises: 2025_03_19_14:02:01
Create Date: 2025-04-13 15:19:26.896428

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel

from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2025_04_13_15:19:26'
down_revision: Union[str, None] = '2025_03_19_14:02:01'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands manually generated by an irritated lead  ###

    # Create pgcrypto extension if it doesn't exist
    op.execute("CREATE EXTENSION IF NOT EXISTS pgcrypto")

    # Alter the 'id' column on 'barcodes' to use gen_random_uuid()
    # this allows upsert (get_or_create behavior) for migration logic
    op.alter_column(
        "barcodes",
        "id",
        server_default=sa.text("gen_random_uuid()"),
        existing_type=sa.dialects.postgresql.UUID(as_uuid=True),
    )

    # clearly leftover from some other feature.
    op.alter_column('requests', 'status',
               existing_type=postgresql.ENUM('New', 'InProgress', 'Completed', name='request_status'),
               nullable=True,
               existing_server_default=sa.text("'New'::request_status"))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands manually generated by an irritated lead ###

    op.alter_column(
        "barcodes",
        "id",
        server_default=None,
        existing_type=sa.dialects.postgresql.UUID(as_uuid=True),
    )

    op.execute("DROP EXTENSION IF EXISTS pgcrypto")

    # clearly leftover from some other feature.
    op.alter_column('requests', 'status',
               existing_type=postgresql.ENUM('New', 'InProgress', 'Completed', name='request_status'),
               nullable=False,
               existing_server_default=sa.text("'New'::request_status"))
    # ### end Alembic commands ###
