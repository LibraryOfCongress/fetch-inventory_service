"""Remove barcodes where necessary

Revision ID: 2023_11_16_11:18:56
Revises: 2023_11_07_11:25:48
Create Date: 2023-11-16 10:18:56.414211

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel



# revision identifiers, used by Alembic.
revision: str = '2023_11_16_11:18:56'
down_revision: Union[str, None] = '2023_11_07_11:25:48'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('aisles_barcode_id_fkey', 'aisles', type_='foreignkey')
    op.drop_column('aisles', 'barcode_id')
    op.alter_column('barcode_types', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.SmallInteger(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('barcode_types_id_seq'::regclass)"))
    op.alter_column('barcode_types', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sqlmodel.sql.sqltypes.AutoString(length=25),
               existing_nullable=False)
    op.create_index(op.f('ix_barcodes_id'), 'barcodes', ['id'], unique=True)
    op.drop_constraint('buildings_barcode_id_fkey', 'buildings', type_='foreignkey')
    op.drop_column('buildings', 'barcode_id')
    op.drop_constraint('ladders_barcode_id_fkey', 'ladders', type_='foreignkey')
    op.drop_column('ladders', 'barcode_id')
    op.drop_constraint('modules_barcode_id_fkey', 'modules', type_='foreignkey')
    op.drop_column('modules', 'barcode_id')
    op.drop_constraint('sides_barcode_id_fkey', 'sides', type_='foreignkey')
    op.drop_column('sides', 'barcode_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('sides', sa.Column('barcode_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key('sides_barcode_id_fkey', 'sides', 'barcodes', ['barcode_id'], ['id'])
    op.add_column('modules', sa.Column('barcode_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key('modules_barcode_id_fkey', 'modules', 'barcodes', ['barcode_id'], ['id'])
    op.add_column('ladders', sa.Column('barcode_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key('ladders_barcode_id_fkey', 'ladders', 'barcodes', ['barcode_id'], ['id'])
    op.add_column('buildings', sa.Column('barcode_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key('buildings_barcode_id_fkey', 'buildings', 'barcodes', ['barcode_id'], ['id'])
    op.drop_index(op.f('ix_barcodes_id'), table_name='barcodes')
    op.alter_column('barcode_types', 'name',
               existing_type=sqlmodel.sql.sqltypes.AutoString(length=25),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('barcode_types', 'id',
               existing_type=sa.SmallInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('barcode_types_id_seq'::regclass)"))
    op.add_column('aisles', sa.Column('barcode_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key('aisles_barcode_id_fkey', 'aisles', 'barcodes', ['barcode_id'], ['id'])
    # ### end Alembic commands ###
