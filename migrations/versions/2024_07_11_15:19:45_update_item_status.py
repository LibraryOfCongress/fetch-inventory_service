"""Update Item status

Revision ID: 2024_07_11_15:19:45
Revises: 2024_06_28_14:43:26
Create Date: 2024-07-11 19:19:45.470503

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel

from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "2024_07_11_15:19:45"
down_revision: Union[str, None] = "2024_07_11_10:00:00"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# Items Table
new_item_type = postgresql.ENUM(
    "In", "Requested", "Withdrawn", "Out", name="item_status"
)
old_item_type = postgresql.ENUM("In", "Out", name="item_status")
tmp_item_type = sa.Enum("In", "Requested", "Withdrawn", "Out", name="_item_status")
# Non Tray Items Table
new_non_tray_item_type = postgresql.ENUM(
    "In", "Requested", "Withdrawn", "Out", name="non_tray_item_status"
)
old_non_tray_item_type = postgresql.ENUM("In", "Out", name="non_tray_item_status")
tmp_non_tray_item_type = sa.Enum(
    "In", "Requested", "Withdrawn", "Out", name="_non_tray_item_status"
)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create a temporary "_item_status" type, convert and drop the "old" type
    tmp_item_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE items ALTER COLUMN status TYPE _item_status"
        " USING status::text::_item_status"
    )
    old_item_type.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "new" status type
    new_item_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE items ALTER COLUMN status TYPE item_status"
        " USING status::text::item_status"
    )

    tmp_item_type.drop(op.get_bind(), checkfirst=False)

    tmp_non_tray_item_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE non_tray_items ALTER COLUMN status TYPE _non_tray_item_status"
        " USING status::text::_non_tray_item_status"
    )
    old_non_tray_item_type.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "new" status type
    new_non_tray_item_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE non_tray_items ALTER COLUMN status TYPE non_tray_item_status"
        " USING status::text::non_tray_item_status"
    )
    tmp_non_tray_item_type.drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###


# Items Table
downgrade_new_item_type = postgresql.ENUM("In", "Out", name="item_status")
downgrade_old_item_type = postgresql.ENUM(
    "In", "Requested", "Withdrawn", "Out", name="item_status"
)
downgrade_tmp_item_type = sa.Enum("In", "Out", name="_item_status")
# Non Tray Items Table
downgrade_new_non_tray_item_type = postgresql.ENUM(
    "In", "Requested", "Withdrawn", "Out", name="non_tray_item_status"
)
downgrade_old_non_tray_item_type = postgresql.ENUM(
    "In", "Out", name="non_tray_item_status"
)
downgrade_tmp_non_tray_item_type = sa.Enum(
    "In", "Requested", "Withdrawn", "Out", name="_non_tray_item_status"
)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create a temporary "_item_status" type, convert and drop the "old" type
    downgrade_tmp_item_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE items ALTER COLUMN status TYPE _item_status"
        " USING status::text::_item_status"
    )
    downgrade_old_item_type.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "new" status type
    downgrade_new_item_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE items ALTER COLUMN status TYPE item_status"
        " USING status::text::item_status"
    )

    downgrade_tmp_item_type.drop(op.get_bind(), checkfirst=False)

    downgrade_tmp_non_tray_item_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE non_tray_items ALTER COLUMN status TYPE _non_tray_item_status"
        " USING status::text::_non_tray_item_status"
    )
    downgrade_old_non_tray_item_type.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "new" status type
    downgrade_new_non_tray_item_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE non_tray_items ALTER COLUMN status TYPE non_tray_item_status"
        " USING status::text::non_tray_item_status"
    )
    downgrade_tmp_non_tray_item_type.drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
