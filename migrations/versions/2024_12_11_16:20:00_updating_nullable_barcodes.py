"""Updating nullable barcodes

Revision ID: 2024_12_11_16:20:00
Revises: 2024_11_24_21:51:13
Create Date: 2024-12-11 21:20:00.608461

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel



# revision identifiers, used by Alembic.
revision: str = '2024_12_11_16:20:00'
down_revision: Union[str, None] = '2024_12_09_21:49:15'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Add the new columns
    op.add_column('items', sa.Column('withdrawn_barcode_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column(
        'non_tray_items', sa.Column(
            'withdrawn_barcode_id', sqlmodel.sql.sqltypes.GUID(), nullable=True
            )
        )
    op.add_column(
        'trays', sa.Column(
            'withdrawn_barcode_id', sqlmodel.sql.sqltypes.GUID(), nullable=True
            )
        )

    # Alter the existing columns
    op.alter_column('items', 'barcode_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('non_tray_items', 'barcode_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('trays', 'barcode_id',
               existing_type=sa.UUID(),
               nullable=True)

    # Add the CheckConstraint
    op.create_check_constraint(
        "ck_items_barcode_xor_withdrawn_barcode",
        "items",
        "(barcode_id IS NOT NULL) OR (withdrawn_barcode_id IS NOT NULL)"
    )
    op.create_check_constraint(
        "ck_non_tray_items_barcode_xor_withdrawn_barcode",
        "non_tray_items",
        "(barcode_id IS NOT NULL) OR (withdrawn_barcode_id IS NOT NULL)"
    )
    op.create_check_constraint(
        "ck_trays_barcode_xor_withdrawn_barcode",
        "trays",
        "(barcode_id IS NOT NULL) OR (withdrawn_barcode_id IS NOT NULL)"
    )

    # Add the foreign keys
    op.create_foreign_key(
        "withdrawn_item_barcode_id", 'items', 'barcodes', ['withdrawn_barcode_id'],
        ['id']
        )
    op.create_foreign_key(
        "withdrawn_non_tray_item_barcode_id", 'non_tray_items', 'barcodes',
        ['withdrawn_barcode_id'], ['id']
        )
    op.create_foreign_key("withdrawn_tray_barcode_id", 'trays', 'barcodes',
                          ['withdrawn_barcode_id'], ['id'])

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Revert Trays table changes
    op.drop_constraint("ck_trays_barcode_xor_withdrawn_barcode", 'trays', type_='check')
    op.drop_constraint("withdrawn_tray_barcode_id", 'trays', type_='foreignkey')
    op.alter_column('trays', 'barcode_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_column('trays', 'withdrawn_barcode_id')

    # Revert NonTrayItems table changes
    op.drop_constraint("ck_non_tray_items_barcode_xor_withdrawn_barcode", 'non_tray_items', type_='check')
    op.drop_constraint("withdrawn_non_tray_item_barcode_id", 'non_tray_items', type_='foreignkey')
    op.alter_column('non_tray_items', 'barcode_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_column('non_tray_items', 'withdrawn_barcode_id')

    # Revert Items table changes
    op.drop_constraint("ck_items_barcode_xor_withdrawn_barcode", 'items', type_='check')
    op.drop_constraint("withdrawn_item_barcode_id", 'items', type_='foreignkey')
    op.alter_column('items', 'barcode_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_column('items', 'withdrawn_barcode_id')
    # ### end Alembic commands ###
#
