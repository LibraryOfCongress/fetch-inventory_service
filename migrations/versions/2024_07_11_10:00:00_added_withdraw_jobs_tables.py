"""Added withdraw jobs tables

Revision ID: 2024_07_11_10:00:00
Revises: 2024_07_11_10:00:00
Create Date: 2024-07-11 10:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel

from sqlalchemy.dialects import postgresql

from app.models.withdraw_jobs import WithdrawJobStatus

# revision identifiers, used by Alembic.
revision: str = "2024_07_11_10:00:00"
down_revision: Union[str, None] = "2024_07_10_09:09:37"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "withdraw_jobs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("assigned_user_id", sa.Integer(), nullable=True),
        sa.Column("last_transition", sa.DateTime(), nullable=True),
        sa.Column("run_time", sa.Interval(), nullable=False),
        sa.Column("pick_list_id", sa.Integer(), nullable=True),
        sa.Column("create_dt", sa.DateTime(), nullable=False),
        sa.Column("update_dt", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["assigned_user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["pick_list_id"],
            ["pick_lists.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    withdraw_status_enum = postgresql.ENUM(WithdrawJobStatus, name="withdraw_status")
    withdraw_status_enum.create(op.get_bind(), checkfirst=True)
    op.add_column(
        "withdraw_jobs",
        sa.Column(
            "status",
            withdraw_status_enum,
            nullable=True,
            server_default=WithdrawJobStatus.Created,
        ),
    )

    op.create_table(
        "non_tray_item_withdrawals",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("non_tray_item_id", sa.Integer(), nullable=False),
        sa.Column("withdraw_job_id", sa.Integer(), nullable=False),
        sa.Column("create_dt", sa.DateTime(), nullable=False),
        sa.Column("update_dt", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["non_tray_item_id"],
            ["non_tray_items.id"],
        ),
        sa.ForeignKeyConstraint(
            ["withdraw_job_id"],
            ["withdraw_jobs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "non_tray_item_id", "withdraw_job_id", name="uix_non_tray_item_withdrawals"
        ),
    )
    op.create_table(
        "tray_withdrawals",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("tray_id", sa.Integer(), nullable=False),
        sa.Column("withdraw_job_id", sa.Integer(), nullable=False),
        sa.Column("create_dt", sa.DateTime(), nullable=False),
        sa.Column("update_dt", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["tray_id"],
            ["trays.id"],
        ),
        sa.ForeignKeyConstraint(
            ["withdraw_job_id"],
            ["withdraw_jobs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tray_id", "withdraw_job_id", name="uix_tray_withdrawals"),
    )
    op.create_table(
        "item_withdrawals",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("item_id", sa.Integer(), nullable=False),
        sa.Column("withdraw_job_id", sa.Integer(), nullable=False),
        sa.Column("create_dt", sa.DateTime(), nullable=False),
        sa.Column("update_dt", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["items.id"],
        ),
        sa.ForeignKeyConstraint(
            ["withdraw_job_id"],
            ["withdraw_jobs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("item_id", "withdraw_job_id", name="uix_item_withdrawals"),
    )
    op.alter_column(
        "requests", "request_type_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "requests", "delivery_location_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.drop_table("pick_list_requests")
    op.add_column("requests", sa.Column("pick_list_id", sa.Integer(), nullable=True))
    op.add_column(
        "requests",
        sa.Column("fulfilled", sa.Boolean(), nullable=False, server_default="False"),
    )
    op.create_foreign_key(None, "requests", "pick_lists", ["pick_list_id"], ["id"])
    op.drop_column("requests", "scanned_for_retrieval")
    op.drop_column("requests", "scanned_for_pick_list")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "requests",
        sa.Column(
            "scanned_for_pick_list",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "requests",
        sa.Column(
            "scanned_for_retrieval",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_constraint(None, "requests", type_="foreignkey")
    op.drop_column("requests", "fulfilled")
    op.drop_column("requests", "pick_list_id")
    op.alter_column(
        "refile_jobs",
        "status",
        existing_type=sa.Enum(
            "Created", "Paused", "Running", "Completed", name="refile_job_status"
        ),
        type_=postgresql.ENUM(
            "Created", "Paused", "Running", "Completed", name="refile_job_status_enum"
        ),
        existing_nullable=True,
        existing_server_default=sa.text("'Created'::refile_job_status_enum"),
    )
    op.drop_constraint("uq_item_id_refile_job_id", "refile_items", type_="unique")
    op.alter_column(
        "refile_items", "refile_job_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.create_table(
        "pick_list_requests",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("request_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("pick_list_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["pick_list_id"],
            ["pick_lists.id"],
            name="pick_list_requests_pick_list_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["request_id"], ["requests.id"], name="pick_list_requests_request_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="pick_list_requests_pkey"),
        sa.UniqueConstraint(
            "request_id", "pick_list_id", name="uq_request_id_pick_list_id"
        ),
    )
    op.alter_column(
        "requests", "request_type_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "requests", "delivery_location_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.drop_table("item_withdrawals")
    op.drop_table("tray_withdrawals")
    op.drop_table("non_tray_item_withdrawals")
    op.drop_table("withdraw_jobs")
    # ### end Alembic commands ###
